var BuildBridgedWorker=function(workerFunction,workerExportNames,mainExportNames,mainExportHandles){var baseWorkerStr=workerFunction.toString().match(/^\s*function\s*\(\s*\)\s*\{(([\s\S](?!\}$))*[\s\S])/)[1];var extraWorkerStr=[];extraWorkerStr.push("var main = {};\n");for(var i=0;i<mainExportNames.length;i++){var name=mainExportNames[i];if(name.charAt(name.length-1)=="*"){name=name.substr(0,name.length-1);mainExportNames[i]=name;extraWorkerStr.push("main."+name+" = function(/* arguments */){\n var args = Array.prototype.slice.call(arguments); var buffers = args.pop(); \n self.postMessage({foo:'"+
name+"', args:args},buffers)\n}; \n")}else extraWorkerStr.push("main."+name+" = function(/* arguments */){\n var args = Array.prototype.slice.call(arguments); \n self.postMessage({foo:'"+name+"', args:args})\n}; \n")}var tmpStr=[];for(var i=0;i<workerExportNames.length;i++){var name=workerExportNames[i];name=name.charAt(name.length-1)=="*"?name.substr(0,name.length-1):name;tmpStr.push(name+": "+name)}extraWorkerStr.push("var foos={"+tmpStr.join(",")+"};\n");extraWorkerStr.push("self.onmessage = function(e){\n");
extraWorkerStr.push("if(e.data.foo in foos) \n  foos[e.data.foo].apply(null, e.data.args); \n else \n throw(new Error('Main thread requested function ' + e.data.foo + '. But it is not available.'));\n");extraWorkerStr.push("\n};\n");var fullWorkerStr=baseWorkerStr+"\n\n/*==== STUFF ADDED BY BuildBridgeWorker ==== */\n\n"+extraWorkerStr.join("");var url=window.URL.createObjectURL(new Blob([fullWorkerStr],{type:"text/javascript"}));var theWorker=new Worker(url);theWorker.onmessage=function(e){var fooInd=
mainExportNames.indexOf(e.data.foo);if(fooInd!=-1)mainExportHandles[fooInd].apply(null,e.data.args);else throw new Error("Worker requested function "+e.data.foo+". But it is not available.");};var ret={blobURL:url};var makePostMessageForFunction=function(name,hasBuffers){if(hasBuffers)return function(){var args=Array.prototype.slice.call(arguments);var buffers=args.pop();theWorker.postMessage({foo:name,args:args},buffers)};else return function(){var args=Array.prototype.slice.call(arguments);theWorker.postMessage({foo:name,
args:args})}};for(var i=0;i<workerExportNames.length;i++){var name=workerExportNames[i];if(name.charAt(name.length-1)=="*"){name=name.substr(0,name.length-1);ret[name]=makePostMessageForFunction(name,true)}else ret[name]=makePostMessageForFunction(name,false)}return ret};